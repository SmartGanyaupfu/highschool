// <auto-generated />
using System;
using HighSchool.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HighSchool.API.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20230108160320_categoryEntity")]
    partial class categoryEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.11");

            modelBuilder.Entity("HighSchool.Entities.Models.AllocatedResource", b =>
                {
                    b.Property<int>("AllocatedResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AuthorId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DatePublished")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateReturned")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Details")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Published")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("AllocatedResourceId");

                    b.HasIndex("StudentId");

                    b.ToTable("AllocatedResources");
                });

            modelBuilder.Entity("HighSchool.Entities.Models.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AuthorId")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("CorrectAnswer")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DatePublished")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Explantion")
                        .HasColumnType("TEXT");

                    b.Property<string>("Option")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Published")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("HighSchool.Entities.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AuthorId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DatePublished")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Published")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Slug")
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId");

                    b.HasIndex("CourseId");

                    b.HasIndex("PostId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            DateCreated = new DateTime(2023, 1, 8, 18, 3, 19, 875, DateTimeKind.Local).AddTicks(520),
                            DateUpdated = new DateTime(2023, 1, 8, 18, 3, 19, 875, DateTimeKind.Local).AddTicks(520),
                            Deleted = false,
                            Name = "Mobile",
                            Published = false,
                            Slug = "mobile-app"
                        },
                        new
                        {
                            CategoryId = 2,
                            DateCreated = new DateTime(2023, 1, 8, 18, 3, 19, 875, DateTimeKind.Local).AddTicks(520),
                            DateUpdated = new DateTime(2023, 1, 8, 18, 3, 19, 875, DateTimeKind.Local).AddTicks(520),
                            Deleted = false,
                            Name = "Web",
                            Published = false,
                            Slug = "web"
                        });
                });

            modelBuilder.Entity("HighSchool.Entities.Models.ContentBlock", b =>
                {
                    b.Property<int>("ContentBlockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("ContentBlockId");

                    b.ToTable("ContentBlocks");
                });

            modelBuilder.Entity("HighSchool.Entities.Models.Course", b =>
                {
                    b.Property<Guid>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthorId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CareerOpportunites")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<string>("Curriculum")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DatePublished")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<string>("Excerpt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Faculty")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FeatureImageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Level")
                        .HasColumnType("TEXT");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("MetaKeyWords")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prerequisite")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Published")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Slug")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("CourseId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("HighSchool.Entities.Models.CourseWorkReport", b =>
                {
                    b.Property<int>("CourseWorkReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("TEXT");

                    b.HasKey("CourseWorkReportId");

                    b.HasIndex("StudentId");

                    b.ToTable("CourseWorkReports");
                });

            modelBuilder.Entity("HighSchool.Entities.Models.EmployeeType", b =>
                {
                    b.Property<int>("EmployeeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AuthorId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DatePublished")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Published")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("EmployeeTypeId");

                    b.ToTable("EmployeeTypes");
                });

            modelBuilder.Entity("HighSchool.Entities.Models.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AltText")
                        .HasColumnType("TEXT");

                    b.Property<string>("Caption")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PublicId")
                        .HasColumnType("TEXT");

                    b.HasKey("ImageId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            ImageId = 1,
                            AltText = "Test",
                            ImageUrl = "https://learn.microsoft.com/en-us/shows/azure-sql-for-beginners/media/azuresqlforbeginners-2020-511x287.png",
                            Name = "My-seed-Image"
                        },
                        new
                        {
                            ImageId = 2,
                            AltText = "Test 2",
                            ImageUrl = "https://learn.microsoft.com/en-us/shows/azure-sql-for-beginners/media/azuresqlforbeginners-2020-511x287.png",
                            Name = "My-seed-Image 2nd"
                        });
                });

            modelBuilder.Entity("HighSchool.Entities.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("AmountPaid")
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthorId")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Balance")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DatePublished")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("InvoiceTerms")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("InvoiceTotal")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Published")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Term")
                        .HasColumnType("TEXT");

                    b.HasKey("InvoiceID");

                    b.HasIndex("StudentId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("HighSchool.Entities.Models.InvoiceItem", b =>
                {
                    b.Property<int>("InvoiceItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("InvoiceID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Item")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Total")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("UnityPrice")
                        .HasColumnType("TEXT");

                    b.HasKey("InvoiceItemID");

                    b.HasIndex("InvoiceID");

                    b.ToTable("InvoiceItem");
                });

            modelBuilder.Entity("HighSchool.Entities.Models.LessonPlan", b =>
                {
                    b.Property<int>("LessonPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("StaffId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("WeekEnding")
                        .HasColumnType("TEXT");

                    b.HasKey("LessonPlanId");

                    b.HasIndex("StaffId");

                    b.ToTable("LessonPlans");
                });

            modelBuilder.Entity("HighSchool.Entities.Models.NextOfKin", b =>
                {
                    b.Property<int>("NextOfKinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("NextOfKinId");

                    b.ToTable("NextOfKins");
                });

            modelBuilder.Entity("HighSchool.Entities.Models.Note", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AuthorId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DatePublished")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Published")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("NoteId");

                    b.HasIndex("StudentId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("HighSchool.Entities.Models.Page", b =>
                {
                    b.Property<Guid>("PageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthorId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DatePublished")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Excerpt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FeatureImageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("MetaKeyWords")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Published")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Slug")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("PageId");

                    b.ToTable("Pages");

                    b.HasData(
                        new
                        {
                            PageId = new Guid("c0a198f0-6b74-4b1e-880e-cf0c34a74ac4"),
                            Content = "The innner part of the solar cookker is made of mirroes",
                            DateCreated = new DateTime(2023, 1, 8, 18, 3, 19, 875, DateTimeKind.Local).AddTicks(110),
                            DateUpdated = new DateTime(2023, 1, 8, 18, 3, 19, 875, DateTimeKind.Local).AddTicks(130),
                            Deleted = false,
                            FeatureImageId = 1,
                            MetaDescription = "The inner was the inner",
                            MetaKeyWords = "test,tets,done",
                            Published = false,
                            Slug = "home",
                            Title = "Home"
                        },
                        new
                        {
                            PageId = new Guid("d1db8b0d-c52c-4152-94cc-95a5413a8d87"),
                            Content = "The innner part of the solar cookker is made of mirroes",
                            DateCreated = new DateTime(2023, 1, 8, 18, 3, 19, 875, DateTimeKind.Local).AddTicks(170),
                            DateUpdated = new DateTime(2023, 1, 8, 18, 3, 19, 875, DateTimeKind.Local).AddTicks(170),
                            Deleted = false,
                            FeatureImageId = 1,
                            MetaDescription = "The inner was the inner",
                            MetaKeyWords = "test,tets,done",
                            Published = false,
                            Slug = "about",
                            Title = "About"
                        },
                        new
                        {
                            PageId = new Guid("df61487e-dd0a-4403-b092-30c13d2a691a"),
                            Content = "The innner part of the solar cookker is made of mirroes",
                            DateCreated = new DateTime(2023, 1, 8, 18, 3, 19, 875, DateTimeKind.Local).AddTicks(180),
                            DateUpdated = new DateTime(2023, 1, 8, 18, 3, 19, 875, DateTimeKind.Local).AddTicks(180),
                            Deleted = false,
                            MetaDescription = "The inner was the inner",
                            MetaKeyWords = "test,tets,done",
                            Published = false,
                            Slug = "contact",
                            Title = "Contact"
                        });
                });

            modelBuilder.Entity("HighSchool.Entities.Models.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("AmountPaid")
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthorId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DatePublished")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("InvoiceID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Published")
                        .HasColumnType("INTEGER");

                    b.HasKey("PaymentID");

                    b.HasIndex("InvoiceID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("HighSchool.Entities.Models.PhysicalAddress", b =>
                {
                    b.Property<int>("PhysicalAddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AddressLineTwo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Province")
                        .HasColumnType("TEXT");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("Suburb")
                        .HasColumnType("TEXT");

                    b.Property<string>("UnitName")
                        .HasColumnType("TEXT");

                    b.Property<int>("UnitNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("PhysicalAddressID");

                    b.ToTable("PhysicalAddresses");
                });

            modelBuilder.Entity("HighSchool.Entities.Models.Post", b =>
                {
                    b.Property<Guid>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthorId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DatePublished")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Excerpt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FeatureImageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("MetaKeyWords")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Published")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Slug")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("PostId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            PostId = new Guid("d9715091-12b4-4f11-97bf-3157c584935d"),
                            Content = "The innner part of the solar cookker is made of mirroes",
                            DateCreated = new DateTime(2023, 1, 8, 18, 3, 19, 875, DateTimeKind.Local).AddTicks(350),
                            DateUpdated = new DateTime(2023, 1, 8, 18, 3, 19, 875, DateTimeKind.Local).AddTicks(350),
                            Deleted = false,
                            FeatureImageId = 1,
                            MetaDescription = "The inner was the inner",
                            MetaKeyWords = "test,tets,done",
                            Published = false,
                            Slug = "home",
                            Title = "Home"
                        },
                        new
                        {
                            PostId = new Guid("d97fa73c-7777-44e5-8e2f-f28267d51ed4"),
                            Content = "The innner part of the solar cookker is made of mirroes",
                            DateCreated = new DateTime(2023, 1, 8, 18, 3, 19, 875, DateTimeKind.Local).AddTicks(360),
                            DateUpdated = new DateTime(2023, 1, 8, 18, 3, 19, 875, DateTimeKind.Local).AddTicks(360),
                            Deleted = false,
                            FeatureImageId = 1,
                            MetaDescription = "The inner was the inner",
                            MetaKeyWords = "test,tets,done",
                            Published = false,
                            Slug = "about",
                            Title = "About"
                        },
                        new
                        {
                            PostId = new Guid("6b7852ad-db12-46f2-8ecb-3f021e02cbbc"),
                            Content = "The innner part of the solar cookker is made of mirroes",
                            DateCreated = new DateTime(2023, 1, 8, 18, 3, 19, 875, DateTimeKind.Local).AddTicks(370),
                            DateUpdated = new DateTime(2023, 1, 8, 18, 3, 19, 875, DateTimeKind.Local).AddTicks(370),
                            Deleted = false,
                            MetaDescription = "The inner was the inner",
                            MetaKeyWords = "test,tets,done",
                            Published = false,
                            Slug = "contact",
                            Title = "Contact"
                        });
                });

            modelBuilder.Entity("HighSchool.Entities.Models.ProgressReport", b =>
                {
                    b.Property<int>("ProgressReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AuthorId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClassTeacher")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DatePublished")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Published")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Term")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Year")
                        .HasColumnType("TEXT");

                    b.HasKey("ProgressReportId");

                    b.HasIndex("StudentId");

                    b.ToTable("ProgressReports");
                });

            modelBuilder.Entity("HighSchool.Entities.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AuthorId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DatePublished")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Published")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("QuizId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("QuestionId");

                    b.HasIndex("QuizId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("HighSchool.Entities.Models.Quiz", b =>
                {
                    b.Property<int>("QuizId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AuthorId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DatePublished")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Published")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("QuizId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("HighSchool.Entities.Models.Staff", b =>
                {
                    b.Property<Guid>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthorId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DatePublished")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EmployeeTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Employer")
                        .HasColumnType("TEXT");

                    b.Property<string>("Facebook")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FeatureImageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("Instagram")
                        .HasColumnType("TEXT");

                    b.Property<string>("JobTitle")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LinkedIn")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaidenName")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("TEXT");

                    b.Property<string>("MiddleName")
                        .HasColumnType("TEXT");

                    b.Property<string>("NationalIdentityNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PhysicalAddressId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Published")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Skype")
                        .HasColumnType("TEXT");

                    b.Property<string>("Summary")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<string>("Twitter")
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .HasColumnType("TEXT");

                    b.Property<string>("YouTube")
                        .HasColumnType("TEXT");

                    b.HasKey("StaffId");

                    b.HasIndex("CourseId");

                    b.HasIndex("EmployeeTypeId");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("HighSchool.Entities.Models.Student", b =>
                {
                    b.Property<Guid>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthorId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Class")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DatePublished")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("Facebook")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FeatureImageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("Instagram")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LinkedIn")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaidenName")
                        .HasColumnType("TEXT");

                    b.Property<string>("MiddleName")
                        .HasColumnType("TEXT");

                    b.Property<string>("NationalIdentityNumber")
                        .HasColumnType("TEXT");

                    b.Property<int?>("NextOfKinId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PhysicalAddressId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Published")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Skype")
                        .HasColumnType("TEXT");

                    b.Property<string>("Summary")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<string>("Twitter")
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .HasColumnType("TEXT");

                    b.Property<string>("YouTube")
                        .HasColumnType("TEXT");

                    b.HasKey("StudentId");

                    b.HasIndex("NextOfKinId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("HighSchool.Entities.Models.Widget", b =>
                {
                    b.Property<int>("WidgetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AuthorId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPage")
                        .HasColumnType("TEXT");

                    b.Property<string>("CvUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DatePublished")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EducationBlock")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FbUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("FooterCopyrightBlock")
                        .HasColumnType("TEXT");

                    b.Property<string>("FooterOne")
                        .HasColumnType("TEXT");

                    b.Property<string>("FooterThree")
                        .HasColumnType("TEXT");

                    b.Property<string>("FooterTwo")
                        .HasColumnType("TEXT");

                    b.Property<string>("GitHubUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("HireMeBlock")
                        .HasColumnType("TEXT");

                    b.Property<string>("HomePage")
                        .HasColumnType("TEXT");

                    b.Property<string>("HomePageSize")
                        .HasColumnType("TEXT");

                    b.Property<string>("InstagramUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("InterestBlock")
                        .HasColumnType("TEXT");

                    b.Property<string>("Intro")
                        .HasColumnType("TEXT");

                    b.Property<string>("LearnToCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("LinkedInUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostPageSize")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Published")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SkillBlock")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<string>("TwitterUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkBlock")
                        .HasColumnType("TEXT");

                    b.Property<string>("YouTubeUrl")
                        .HasColumnType("TEXT");

                    b.HasKey("WidgetId");

                    b.ToTable("Widgets");
                });

            modelBuilder.Entity("HighSchool.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HighSchool.Entities.Models.AllocatedResource", b =>
                {
                    b.HasOne("HighSchool.Entities.Models.Student", "Student")
                        .WithMany("AllocatedResources")
                        .HasForeignKey("StudentId");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("HighSchool.Entities.Models.Answer", b =>
                {
                    b.HasOne("HighSchool.Entities.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("HighSchool.Entities.Models.Category", b =>
                {
                    b.HasOne("HighSchool.Entities.Models.Course", null)
                        .WithMany("Categories")
                        .HasForeignKey("CourseId");

                    b.HasOne("HighSchool.Entities.Models.Post", null)
                        .WithMany("Categories")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("HighSchool.Entities.Models.CourseWorkReport", b =>
                {
                    b.HasOne("HighSchool.Entities.Models.Student", null)
                        .WithMany("CourseWorkReports")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("HighSchool.Entities.Models.Invoice", b =>
                {
                    b.HasOne("HighSchool.Entities.Models.Student", "Student")
                        .WithMany("Invoices")
                        .HasForeignKey("StudentId");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("HighSchool.Entities.Models.InvoiceItem", b =>
                {
                    b.HasOne("HighSchool.Entities.Models.Invoice", null)
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoiceID");
                });

            modelBuilder.Entity("HighSchool.Entities.Models.LessonPlan", b =>
                {
                    b.HasOne("HighSchool.Entities.Models.Staff", "Teacher")
                        .WithMany("LessonPlans")
                        .HasForeignKey("StaffId");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("HighSchool.Entities.Models.Note", b =>
                {
                    b.HasOne("HighSchool.Entities.Models.Student", "Student")
                        .WithMany("Notes")
                        .HasForeignKey("StudentId");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("HighSchool.Entities.Models.Payment", b =>
                {
                    b.HasOne("HighSchool.Entities.Models.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceID");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("HighSchool.Entities.Models.ProgressReport", b =>
                {
                    b.HasOne("HighSchool.Entities.Models.Student", null)
                        .WithMany("ProgressReports")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("HighSchool.Entities.Models.Question", b =>
                {
                    b.HasOne("HighSchool.Entities.Models.Quiz", null)
                        .WithMany("Questions")
                        .HasForeignKey("QuizId");
                });

            modelBuilder.Entity("HighSchool.Entities.Models.Staff", b =>
                {
                    b.HasOne("HighSchool.Entities.Models.Course", null)
                        .WithMany("Teachers")
                        .HasForeignKey("CourseId");

                    b.HasOne("HighSchool.Entities.Models.EmployeeType", "EmployeeType")
                        .WithMany()
                        .HasForeignKey("EmployeeTypeId");

                    b.Navigation("EmployeeType");
                });

            modelBuilder.Entity("HighSchool.Entities.Models.Student", b =>
                {
                    b.HasOne("HighSchool.Entities.Models.NextOfKin", "NextOfKin")
                        .WithMany()
                        .HasForeignKey("NextOfKinId");

                    b.Navigation("NextOfKin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HighSchool.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HighSchool.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HighSchool.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HighSchool.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HighSchool.Entities.Models.Course", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("HighSchool.Entities.Models.Invoice", b =>
                {
                    b.Navigation("InvoiceItems");
                });

            modelBuilder.Entity("HighSchool.Entities.Models.Post", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("HighSchool.Entities.Models.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("HighSchool.Entities.Models.Quiz", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("HighSchool.Entities.Models.Staff", b =>
                {
                    b.Navigation("LessonPlans");
                });

            modelBuilder.Entity("HighSchool.Entities.Models.Student", b =>
                {
                    b.Navigation("AllocatedResources");

                    b.Navigation("CourseWorkReports");

                    b.Navigation("Invoices");

                    b.Navigation("Notes");

                    b.Navigation("ProgressReports");
                });
#pragma warning restore 612, 618
        }
    }
}
